{
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workbookDisplayName": {
      "type": "string",
      "defaultValue": "Global Sign-ins",
      "metadata": {
        "description": "The friendly name for the workbook that is used in the Gallery or Saved List.  This name must be unique within a resource group."
      }
    },
    "workbookType": {
      "type": "string",
      "defaultValue": "sentinel",
      "metadata": {
        "description": "The gallery that the workbook will been shown under. Supported values include workbook, tsg, etc. Usually, this is 'workbook'"
      }
    },
    "workbookSourceId": {
      "type": "string",
      "defaultValue": "/subscriptions/<SUB ID>/resourcegroups<RG NAME>/providers/microsoft.operationalinsights/workspaces/<WORKSPACE NAME>",
      "metadata": {
        "description": "ARM ID of the Log analytics workspace e.g. /subscriptions/<SUB ID>/resourcegroups<RG NAME>/providers/microsoft.operationalinsights/workspaces/<WORKSPACE NAME>"
      }
    },
    "workbookId": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "The unique guid for this workbook instance"
      }
    }
  },
  "resources": [
    {
      "name": "[parameters('workbookId')]",
      "type": "microsoft.insights/workbooks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2022-04-01",
      "dependsOn": [],
      "kind": "shared",
      "properties": {
        "displayName": "[parameters('workbookDisplayName')]",
        "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"9bf25f65-d266-446e-84ea-2f9ddfe11c4c\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Date\",\"type\":4,\"description\":\"Used to define the date range for the login reports\",\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}]},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":2592000000}}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 5\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let CountryCodes = externaldata (country: string,countryOrRegion:string) [@'https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/refs/heads/master/all/all.csv'] with (format=csv,ignoreFirstRecord=True)\\r\\n| extend country = iif(country == \\\"United Kingdom of Great Britain and Northern Ireland\\\",\\\"United Kingdom\\\",country);\\r\\n//\\r\\nSigninLogs\\r\\n| where TokenIssuerType in ('AzureAD', 'ADFederationServices') or '*' in ('AzureAD', 'ADFederationServices')\\r\\n| where ResultType != 50074\\r\\n| where IPAddress !contains \\\"XXXXXXX\\\"\\r\\n| extend CountryGeo = geo_info_from_ip_address(IPAddress).country\\r\\n| extend CountryGeo = tostring(CountryGeo)\\r\\n| project LocationDetails, TokenIssuerType, Status, Location, CountryGeo \\r\\n| extend errorCode = Status.errorCode\\r\\n| extend SigninStatus = case(errorCode == 0, \\\"Success\\\", errorCode == 50058, \\\"Pending action (Interrupts)\\\", errorCode == 50140, \\\"Pending action (Interrupts)\\\", errorCode == 51006, \\\"Pending action (Interrupts)\\\", errorCode == 50059, \\\"Pending action (Interrupts)\\\", errorCode == 65001, \\\"Pending action (Interrupts)\\\", errorCode == 52004, \\\"Pending action (Interrupts)\\\", errorCode == 50055, \\\"Pending action (Interrupts)\\\", errorCode == 50144, \\\"Pending action (Interrupts)\\\", errorCode == 50072, \\\"Pending action (Interrupts)\\\", errorCode == 50074, \\\"Pending action (Interrupts)\\\", errorCode == 16000, \\\"Pending action (Interrupts)\\\", errorCode == 16001, \\\"Pending action (Interrupts)\\\", errorCode == 16003, \\\"Pending action (Interrupts)\\\", errorCode == 50127, \\\"Pending action (Interrupts)\\\", errorCode == 50125, \\\"Pending action (Interrupts)\\\", errorCode == 50129, \\\"Pending action (Interrupts)\\\", errorCode == 50143, \\\"Pending action (Interrupts)\\\", errorCode == 81010, \\\"Pending action (Interrupts)\\\", errorCode == 81014, \\\"Pending action (Interrupts)\\\", errorCode == 81012, \\\"Pending action (Interrupts)\\\", \\\"Failure\\\")\\r\\n| where SigninStatus == '*' or '*' == '*' or '*' == 'All Sign-ins'\\r\\n| where SigninStatus != 'Success'\\r\\n| join kind=leftouter CountryCodes on $left.CountryGeo == $right.countryOrRegion\\r\\n| extend CountryGeo = iif (isnotempty(country), CountryGeo = country, CountryGeo)\\r\\n| project-away country, countryOrRegion\\r\\n| summarize Count = count() by tostring(CountryGeo)\",\"size\":2,\"title\":\"Failed Login Locations\",\"timeContextFromParameter\":\"Date\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"map\",\"mapSettings\":{\"locInfo\":\"CountryRegion\",\"locInfoColumn\":\"CountryGeo\",\"latitude\":\"LocationDetails\",\"longitude\":\"LocationDetails\",\"sizeSettings\":\"Count\",\"sizeAggregation\":\"Sum\",\"maxSize\":40,\"legendMetric\":\"Count\",\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"nodeColorField\":\"Count\",\"colorAggregation\":\"Sum\",\"type\":\"heatmap\",\"heatmapPalette\":\"redGreen\"}}},\"customWidth\":\"50\",\"name\":\"query - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let CountryCodes = externaldata (country: string,countryOrRegion:string) [@'https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/refs/heads/master/all/all.csv'] with (format=csv,ignoreFirstRecord=True)\\r\\n| extend country = iif(country == \\\"United Kingdom of Great Britain and Northern Ireland\\\",\\\"United Kingdom\\\",country);\\r\\n//\\r\\nSigninLogs\\r\\n| where TokenIssuerType in ('AzureAD', 'ADFederationServices') or '*' in ('AzureAD', 'ADFederationServices')\\r\\n| where IPAddress !contains \\\"XXXXXXX\\\"\\r\\n| extend CountryGeo = geo_info_from_ip_address(IPAddress).country\\r\\n| extend CountryGeo = iif(isempty(CountryGeo),CountryGeo = Location, CountryGeo)\\r\\n| project LocationDetails, TokenIssuerType, Status, Location, CountryGeo \\r\\n| extend errorCode = Status.errorCode\\r\\n| extend SigninStatus = case(errorCode == 0, \\\"Success\\\", errorCode == 50058, \\\"Pending action (Interrupts)\\\", errorCode == 50140, \\\"Pending action (Interrupts)\\\", errorCode == 51006, \\\"Pending action (Interrupts)\\\", errorCode == 50059, \\\"Pending action (Interrupts)\\\", errorCode == 65001, \\\"Pending action (Interrupts)\\\", errorCode == 52004, \\\"Pending action (Interrupts)\\\", errorCode == 50055, \\\"Pending action (Interrupts)\\\", errorCode == 50144, \\\"Pending action (Interrupts)\\\", errorCode == 50072, \\\"Pending action (Interrupts)\\\", errorCode == 50074, \\\"Pending action (Interrupts)\\\", errorCode == 16000, \\\"Pending action (Interrupts)\\\", errorCode == 16001, \\\"Pending action (Interrupts)\\\", errorCode == 16003, \\\"Pending action (Interrupts)\\\", errorCode == 50127, \\\"Pending action (Interrupts)\\\", errorCode == 50125, \\\"Pending action (Interrupts)\\\", errorCode == 50129, \\\"Pending action (Interrupts)\\\", errorCode == 50143, \\\"Pending action (Interrupts)\\\", errorCode == 81010, \\\"Pending action (Interrupts)\\\", errorCode == 81014, \\\"Pending action (Interrupts)\\\", errorCode == 81012, \\\"Pending action (Interrupts)\\\", \\\"Failure\\\")\\r\\n| where SigninStatus == '*' or '*' == '*' or '*' == 'All Sign-ins'\\r\\n| where SigninStatus == 'Success'\\r\\n| join kind=leftouter CountryCodes on $left.CountryGeo == $right.countryOrRegion\\r\\n| extend CountryGeo = iif (isnotempty(country), CountryGeo = country, CountryGeo)\\r\\n| project-away country, countryOrRegion\\r\\n| summarize Count = count() by tostring(CountryGeo)\",\"size\":2,\"title\":\"Successful Login Locations\",\"timeContextFromParameter\":\"Date\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"map\",\"mapSettings\":{\"locInfo\":\"CountryRegion\",\"locInfoColumn\":\"CountryGeo\",\"latitude\":\"LocationDetails\",\"longitude\":\"LocationDetails\",\"sizeSettings\":\"Count\",\"sizeAggregation\":\"Sum\",\"maxSize\":40,\"legendMetric\":\"Count\",\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"nodeColorField\":\"Count\",\"colorAggregation\":\"Sum\",\"type\":\"heatmap\",\"heatmapPalette\":\"redGreen\"}}},\"customWidth\":\"50\",\"name\":\"query - 2 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let CountryCodes = externaldata (country: string,countryOrRegion:string) [@'https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/refs/heads/master/all/all.csv'] with (format=csv,ignoreFirstRecord=True)\\r\\n| extend country = iif(country == \\\"United Kingdom of Great Britain and Northern Ireland\\\",\\\"United Kingdom\\\",country);\\r\\n//\\r\\nSigninLogs\\r\\n| where TokenIssuerType in ('AzureAD', 'ADFederationServices') or '*' in ('AzureAD', 'ADFederationServices')\\r\\n| where IPAddress !contains \\\"XXXXXXX\\\"\\r\\n| extend CountryGeo = geo_info_from_ip_address(IPAddress).country\\r\\n| extend CountryGeo = iif(isempty(CountryGeo),CountryGeo = Location, CountryGeo)\\r\\n| extend errorCode = Status.errorCode\\r\\n| extend SigninStatus = case(errorCode == 0, \\\"Success\\\", errorCode == 50058, \\\"Pending action (Interrupts)\\\", errorCode == 50140, \\\"Pending action (Interrupts)\\\", errorCode == 51006, \\\"Pending action (Interrupts)\\\", errorCode == 50059, \\\"Pending action (Interrupts)\\\", errorCode == 65001, \\\"Pending action (Interrupts)\\\", errorCode == 52004, \\\"Pending action (Interrupts)\\\", errorCode == 50055, \\\"Pending action (Interrupts)\\\", errorCode == 50144, \\\"Pending action (Interrupts)\\\", errorCode == 50072, \\\"Pending action (Interrupts)\\\", errorCode == 50074, \\\"Pending action (Interrupts)\\\", errorCode == 16000, \\\"Pending action (Interrupts)\\\", errorCode == 16001, \\\"Pending action (Interrupts)\\\", errorCode == 16003, \\\"Pending action (Interrupts)\\\", errorCode == 50127, \\\"Pending action (Interrupts)\\\", errorCode == 50125, \\\"Pending action (Interrupts)\\\", errorCode == 50129, \\\"Pending action (Interrupts)\\\", errorCode == 50143, \\\"Pending action (Interrupts)\\\", errorCode == 81010, \\\"Pending action (Interrupts)\\\", errorCode == 81014, \\\"Pending action (Interrupts)\\\", errorCode == 81012, \\\"Pending action (Interrupts)\\\", \\\"Failure\\\")\\r\\n| where SigninStatus == '*' or '*' == '*' or '*' == 'All Sign-ins'\\r\\n| where SigninStatus == 'Success'\\r\\n| join kind=leftouter CountryCodes on $left.CountryGeo == $right.countryOrRegion\\r\\n| extend CountryGeo = iif (isnotempty(country), CountryGeo = country, CountryGeo)\\r\\n| project-away country, countryOrRegion\\r\\n| where (parse_json(DeviceDetail).trustType) !contains \\\"joined\\\" //unregistered, unjoined devices only\\r\\n| summarize Count = count()  by tostring(CountryGeo), tostring(parse_json(DeviceDetail).trustType)\",\"size\":2,\"title\":\"Successful Login Locations by Non Joined Devices\",\"timeContextFromParameter\":\"Date\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"map\",\"mapSettings\":{\"locInfo\":\"CountryRegion\",\"locInfoColumn\":\"CountryGeo\",\"latitude\":\"LocationDetails\",\"longitude\":\"LocationDetails\",\"sizeSettings\":\"Count\",\"sizeAggregation\":\"Count\",\"maxSize\":40,\"legendMetric\":\"Count\",\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"nodeColorField\":\"Count\",\"colorAggregation\":\"Sum\",\"type\":\"heatmap\",\"heatmapPalette\":\"greenRed\"}}},\"customWidth\":\"50\",\"name\":\"Query 3\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let CountryCodes = externaldata (country: string,countryOrRegion:string) [@'https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/refs/heads/master/all/all.csv'] with (format=csv,ignoreFirstRecord=True)\\r\\n| extend country = iif(country == \\\"United Kingdom of Great Britain and Northern Ireland\\\",\\\"United Kingdom\\\",country);\\r\\n//\\r\\nSigninLogs\\r\\n| where TokenIssuerType in ('AzureAD', 'ADFederationServices') or '*' in ('AzureAD', 'ADFederationServices')\\r\\n| where IPAddress !contains \\\"XXXXXXX\\\"\\r\\n| extend CountryGeo = geo_info_from_ip_address(IPAddress).country\\r\\n| extend CountryGeo = iif(isempty(CountryGeo),CountryGeo = Location, CountryGeo)\\r\\n| extend errorCode = Status.errorCode\\r\\n| extend SigninStatus = case(errorCode == 0, \\\"Success\\\", errorCode == 50058, \\\"Pending action (Interrupts)\\\", errorCode == 50140, \\\"Pending action (Interrupts)\\\", errorCode == 51006, \\\"Pending action (Interrupts)\\\", errorCode == 50059, \\\"Pending action (Interrupts)\\\", errorCode == 65001, \\\"Pending action (Interrupts)\\\", errorCode == 52004, \\\"Pending action (Interrupts)\\\", errorCode == 50055, \\\"Pending action (Interrupts)\\\", errorCode == 50144, \\\"Pending action (Interrupts)\\\", errorCode == 50072, \\\"Pending action (Interrupts)\\\", errorCode == 50074, \\\"Pending action (Interrupts)\\\", errorCode == 16000, \\\"Pending action (Interrupts)\\\", errorCode == 16001, \\\"Pending action (Interrupts)\\\", errorCode == 16003, \\\"Pending action (Interrupts)\\\", errorCode == 50127, \\\"Pending action (Interrupts)\\\", errorCode == 50125, \\\"Pending action (Interrupts)\\\", errorCode == 50129, \\\"Pending action (Interrupts)\\\", errorCode == 50143, \\\"Pending action (Interrupts)\\\", errorCode == 81010, \\\"Pending action (Interrupts)\\\", errorCode == 81014, \\\"Pending action (Interrupts)\\\", errorCode == 81012, \\\"Pending action (Interrupts)\\\", \\\"Failure\\\")\\r\\n| where SigninStatus == '*' or '*' == '*' or '*' == 'All Sign-ins'\\r\\n| where SigninStatus == 'Success'\\r\\n| join kind=leftouter CountryCodes on $left.CountryGeo == $right.countryOrRegion\\r\\n| extend CountryGeo = iif (isnotempty(country), CountryGeo = country, CountryGeo)\\r\\n| project-away country, countryOrRegion\\r\\n| where (parse_json(DeviceDetail).trustType) contains \\\"joined\\\" //joined devices only\\r\\n| summarize Count = count()  by tostring(CountryGeo), tostring(parse_json(DeviceDetail).trustType)\",\"size\":2,\"title\":\"Successful Login Locations by Joined Devices\",\"timeContextFromParameter\":\"Date\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"map\",\"mapSettings\":{\"locInfo\":\"CountryRegion\",\"locInfoColumn\":\"CountryGeo\",\"latitude\":\"LocationDetails\",\"longitude\":\"LocationDetails\",\"sizeSettings\":\"Count\",\"sizeAggregation\":\"Count\",\"maxSize\":40,\"legendMetric\":\"Count\",\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"nodeColorField\":\"Count\",\"colorAggregation\":\"Sum\",\"type\":\"heatmap\",\"heatmapPalette\":\"greenRed\"}}},\"customWidth\":\"50\",\"name\":\"Query 3 - Copy\"}]},\"name\":\"group - 4\"}],\"isLocked\":false,\"fromTemplateId\":\"sentinel-UserWorkbook\"}",
        "version": "1.0",
        "sourceId": "[parameters('workbookSourceId')]",
        "category": "[parameters('workbookType')]"
      }
    }
  ],
  "outputs": {
    "workbookId": {
      "type": "string",
      "value": "[resourceId( 'microsoft.insights/workbooks', parameters('workbookId'))]"
    }
  },
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
}
